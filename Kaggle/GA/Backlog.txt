# Submissions params
1) iterations=100, thread_count=4, learning_rate=0.1
Score:1.4577

2) iterations=400, thread_count=4, learning_rate=0.06
Score:1.4584

3) iterations=100, thread_count=4, learning_rate=0.3,
                             depth=6, border_count=100, has_time=True,
                             counter_calc_method='SkipTest'
Score: 1.4701

4) iterations=100, thread_count=4, learning_rate=0.4,
                             depth=10, border_count=100, has_time=True,
                             counter_calc_method='SkipTest'
                       
Score: 1.4828


5) iterations=1300, thread_count=4, learning_rate=0.4,
                             depth=7, border_count=100, has_time=True,
                             counter_calc_method='SkipTest'
Score: 1.5122

6) CatBoostRegressor(iterations=100, thread_count=4, learning_rate=0.4,
                             depth=7, border_count=100, has_time=True,
                             counter_calc_method='Full', save_snapshot=True)
   
   CatBoostClassifier(iterations=100, thread_count=4, learning_rate=0.03,
                             depth=7, border_count=100, has_time=True,
                             counter_calc_method='SkipTest', save_snapshot=True)
                             
Score: 1.4660                            


# Done:
1)загрузить данные
2) разгладить джейсоны
3) в колонках разные типы данных. Привести к одинаковым типам
MORE THAN ONE TYPES IN train_df fullVisitorId [<class 'str'>, <class 'int'>] ==> все 'int' к 'str'
MORE THAN ONE TYPES IN train_df isTrueDirect [<class 'str'>, <class 'bool'>] ==> все 'bool' к 'str'
MORE THAN ONE TYPES IN train_df isVideoAd [<class 'str'>, <class 'bool'>] ==> все 'bool' к 'str'
MORE THAN ONE TYPES IN train_df targetingCriteria [<class 'str'>, <class 'dict'>] ==> все {} к 'empty_dict'
MORE THAN ONE TYPES IN test_df fullVisitorId [<class 'str'>, <class 'int'>] ==> все 'int' к 'str'
MORE THAN ONE TYPES IN test_df isTrueDirect [<class 'bool'>, <class 'str'>] ==> все 'bool' к 'str'
MORE THAN ONE TYPES IN test_df isVideoAd [<class 'str'>, <class 'bool'>] ==> все 'bool' к 'str'
MORE THAN ONE TYPES IN test_df targetingCriteria [<class 'str'>, <class 'dict'>] ==> все {} к 'empty_dict'
8) преобразовать фичу date в 2 новые фичи: день недели + выходные. date грохнуть
12) Сделать предикт и закоммитить на Кагл(см 05 домашка). Суммировть и агрегировать пользователей.
11) У фичей заменить редкие значения на others или -1
!) Ревизия данных до и после пиклизации. Где-то потеряли данные.
5) подумать, какие графики могут быть полезны
6) посчитать статистики по признакам
*) отдельная модель: после какой сессии по счету покупает пользователь
    Может быть сделать как отдельный признак
22)Обучить модель на 1300 деревьях, депс = 7.
13) Интегрировать код в блок с обучением катбуста. Для снижения снижения лернрейта



# TODO:
23)Достроить графики с тестом(сравнительный график с train_df).
7) посмотреть пересечения по пользователям в трейне и тесте

10) на пример adContent, где очень мало заполнено данных создать рядом новую фичу 'заполнена ли adContent'. Может быть сам adContent дропуть, поскольку она не несет информацию. 
9) на основое геоданных и визитстарттайма создать фичу времени суток захода в магазин
24) разюить train_df['referralPath'] на первый уровень по слешу, внести фичу в датасэт
25) Сделать классификацию: была ли покупка. ЗАполнить средним, тк РМСЕ




# Backlog
Вадим рассказывал про подсчет функции, что имел в виду?
revenue может быть отрицательным
4)явно надо проверить, где есть пропуски и подумать при наличии, чем заполнять


